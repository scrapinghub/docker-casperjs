#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Utility that converts project and spider settings to environment variables and
job arguments to CasperJS command line options.

This tool can be used in start-crawl script as last command that exec the real
spider script, but before it setups environment from settings in SHUB_SETTINGS
environment variable and arguments according to SHUB_JOB_DATA
environment variable.

An example start-crawl for CasperJS is:

    #/bin/sh
    exec shub-exec -- casperjs --debug

For a job whose spider name is simple.js it will run:

    casperjs --debug simple.js

It's important to add -- before the positional arguments, it helps to distinguish shub-exec options
from script options.

If the job has some setting set, i.e. LOGLEVEL=DEBUG, it will be available in casperjs
process environment as 'LOGLEVEL' envvar with value 'DEBUG'. Any extra argument in SHUB_JOB_DATA
'job_cmd' or 'spider_args' fields are passed to command after spider name, i.e.

    casperjs --debug simple.js --url=http://scrapinghub.com

"""
import argparse
import json
import os


SETTINGS_KEYS = [
    'organization_settings',
    'project_settings',
    'spider_settings',
    'job_settings'
]


def _jobdata():
    return json.loads(os.environ.get('SHUB_JOB_DATA', '{}'))


def _exec_args(jobdata):
    if not jobdata:
        return []
    if 'job_cmd' in jobdata:
        args = jobdata.get('job_cmd', [])
    else:
        spider_args = jobdata.get('spider_args', {})
        args = [jobdata['spider']]
        for key, value in spider_args.items():
            args.append(u'--{}={}'.format(key, value))
    return [x.encode('utf-8') for x in args]


def _settings():
    settings = json.loads(os.environ.get('SHUB_SETTINGS', '{}'))
    merged = {}
    for key in SETTINGS_KEYS:
        merged.update(settings.get(key) or {})
    return merged


def _exec_env(settings):
    env = dict(os.environ)
    env.update({
        k.encode('utf-8'): unicode(v).encode('utf-8')
        for k, v in settings.items()
    })
    return env


def parse_args():
    parser = argparse.ArgumentParser(
        prog='shub-exec',
        description=__doc__.lstrip(),
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        '--ignore-path',
        action='store_true',
        help="Do not use PATH environment variable to locate script.")
    parser.add_argument(
        'cmd',
        nargs='*',
        help="Command to launch spider script. "
             "It's important to add -- before the positional arguments, "
             "see example in the description.")
    return parser.parse_args()


def main():
    args = parse_args()
    jobdata = _jobdata()
    settings = _settings()
    exec_args = args.cmd + _exec_args(jobdata)
    exec_env = _exec_env(settings)

    exec_syscall = os.execve if args.ignore_path else os.execvpe
    exec_syscall(exec_args[0], exec_args, exec_env)


if __name__ == '__main__':
    main()
