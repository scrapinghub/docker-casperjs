#!/usr/bin/env python2
# -*- coding: utf-8 -*-
import codecs
import argparse
import json
import os
import sys
from pipes import quote

# support for non-ascii output
sys.stdout = codecs.getwriter('utf8')(sys.stdout)
sys.stderr = codecs.getwriter('utf8')(sys.stderr)


def value_to_arg(value):
    return quote(unicode(value))


def get_job_cmd():
    job_data_serialized = os.environ.get('SHUB_JOB_DATA')
    if not job_data_serialized:
        return []
    job_data = json.loads(job_data_serialized)
    job_cmd = job_data.get('job_cmd') or []
    # first element is a spider name
    return [value_to_arg(x) for x in job_cmd[1:]]


def get_arguments():
    job_data_serialized = os.environ.get('SHUB_JOB_DATA')
    if not job_data_serialized:
        return {}
    job_data = json.loads(job_data_serialized)
    return job_data.get('spider_args') or {}


SETTINGS_KEYS = [
    'organization_settings',
    'project_settings',
    'spider_settings',
    'job_settings',
]


def get_merged_settings():
    settings_serialized = os.environ.get('SHUB_SETTINGS')
    if not settings_serialized:
        return {}
    merged = {}
    settings = json.loads(settings_serialized)
    for key in SETTINGS_KEYS:
        merged.update(settings.get(key) or {})
    return merged


def dict_to_cli_options_list(values):
    cli_options = []
    for key in sorted(values):
        value = values[key]
        if value == '':
            token = u'--{}'.format(key)
        else:
            token = u'--{}={}'.format(key, value)
        cli_options.append(value_to_arg(token))
    return cli_options


SOURCE_ALL = 'all'
SOURCE_ARGUMENTS = 'arguments'
SOURCE_SETTINGS = 'settings'


def parse_args():
    parser = argparse.ArgumentParser(
        prog='env2options',
        description=(
            "Utility to convert job arguments and/or job settings "
            "to the CasperJS command line options"
        ),
        formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument(
        "source",
        choices=[SOURCE_ALL, SOURCE_ARGUMENTS, SOURCE_SETTINGS],
        default=SOURCE_ALL,
        help="Select what should be converted to command line options")
    return parser.parse_args()


def main():
    args = parse_args()
    if args.source == SOURCE_ALL:
        job_cmd = get_job_cmd()
        merged_settings = get_merged_settings()
        job_arguments = get_arguments()
        merged_settings.update(job_arguments)
        cli_arguments = u' '.join(job_cmd + dict_to_cli_options_list(merged_settings))
    elif args.source == SOURCE_ARGUMENTS:
        job_arguments = get_arguments()
        cli_arguments = get_job_cmd() or dict_to_cli_options_list(job_arguments)
    elif args.source == SOURCE_SETTINGS:
        merged_settings = get_merged_settings()
        cli_arguments = dict_to_cli_options_list(merged_settings)
    else:
        raise RuntimeError('Unknown source value')
    print u' '.join(cli_arguments),


if __name__ == '__main__':
    main()
